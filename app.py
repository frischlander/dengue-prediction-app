#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Flask para Predi√ß√£o de Dengue
========================================

Esta aplica√ß√£o web utiliza um modelo de machine learning pr√©-treinado
para fazer predi√ß√µes de dengue com base em dados cl√≠nicos inseridos
pelo usu√°rio atrav√©s de um formul√°rio web.

Autor: Desenvolvedor Full-Stack S√™nior
Data: Setembro 2025
"""

# Importa√ß√µes necess√°rias
from flask import Flask, request, jsonify, render_template
import pandas as pd
import pickle
import numpy as np
import os

# Inicializa√ß√£o da aplica√ß√£o Flask
app = Flask(__name__)

# Vari√°vel global para armazenar o modelo carregado
model = None

def load_model():
    """
    Carrega o modelo de machine learning pr√©-treinado.
    
    Returns:
        object: Modelo carregado ou None se houver erro
    """
    global model
    try:
        model_path = os.path.join(os.path.dirname(__file__), 'rf_model_dengue.pkl')
        with open(model_path, 'rb') as file:
            model = pickle.load(file)
        print("‚úÖ Modelo carregado com sucesso!")
        return model
    except Exception as e:
        print(f"‚ùå Erro ao carregar o modelo: {str(e)}")
        return None

def prepare_features(data):
    """
    Prepara os dados recebidos do frontend para o formato esperado pelo modelo.
    
    Args:
        data (dict): Dados recebidos do formul√°rio
        
    Returns:
        pd.DataFrame: DataFrame com as features na ordem correta
    """
    # Lista das features na ordem exata esperada pelo modelo
    features = [
        'IDADE', 'CS_SEXO_F', 'CS_SEXO_I', 'CS_SEXO_M',
        'CS_RACA_AMARELA', 'CS_RACA_BRANCA', 'CS_RACA_IGNORADO',
        'CS_RACA_IND√çGENA', 'CS_RACA_PARDA', 'CS_RACA_PRETA',
        'FEBRE_N√ÉO', 'FEBRE_SIM', 'MIALGIA_N√ÉO', 'MIALGIA_SIM',
        'CEFALEIA_N√ÉO', 'CEFALEIA_SIM', 'EXANTEMA_N√ÉO', 'EXANTEMA_SIM',
        'VOMITO_N√ÉO', 'VOMITO_SIM', 'PETEQUIA_N_N√ÉO', 'PETEQUIA_N_SIM',
        'DIABETES_N√ÉO', 'DIABETES_SIM', 'HEMATOLOG_N√ÉO', 'HEMATOLOG_SIM',
        'HEPATOPAT_N√ÉO', 'HEPATOPAT_SIM', 'RENAL_N√ÉO', 'RENAL_SIM'
    ]
    
    # Criar DataFrame com as features na ordem correta
    df = pd.DataFrame([data], columns=features)
    
    return df

@app.route('/')
def index():
    """
    Rota principal que renderiza a p√°gina inicial com o formul√°rio.
    
    Returns:
        str: Template HTML renderizado
    """
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    """
    Rota para fazer predi√ß√µes com base nos dados enviados pelo frontend.
    
    Returns:
        json: Resultado da predi√ß√£o em formato JSON
    """
    try:
        # Verificar se o modelo foi carregado
        if model is None:
            return jsonify({
                'error': 'Modelo n√£o carregado. Verifique se o arquivo rf_model_dengue.pkl existe.',
                'prediction': None
            }), 500
        
        # Obter dados JSON da requisi√ß√£o
        data = request.get_json()
        
        if not data:
            return jsonify({
                'error': 'Nenhum dado recebido.',
                'prediction': None
            }), 400
        
        # Preparar os dados para o modelo
        df = prepare_features(data)
        
        # Fazer a predi√ß√£o
        prediction = model.predict(df)
        
        # Extrair o resultado da predi√ß√£o (primeiro elemento do array)
        prediction_result = int(prediction[0])
        
        # Obter probabilidades se dispon√≠vel
        try:
            probabilities = model.predict_proba(df)
            prob_negative = float(probabilities[0][0])
            prob_positive = float(probabilities[0][1])
        except:
            prob_negative = None
            prob_positive = None
        
        # Retornar resultado em formato JSON
        response = {
            'prediction': prediction_result,
            'message': 'Positivo para Dengue' if prediction_result == 1 else 'Negativo para Dengue',
            'probability_negative': prob_negative,
            'probability_positive': prob_positive
        }
        
        return jsonify(response)
        
    except Exception as e:
        # Tratamento de erros
        return jsonify({
            'error': f'Erro interno do servidor: {str(e)}',
            'prediction': None
        }), 500

@app.route('/health')
def health_check():
    """
    Rota para verificar o status da aplica√ß√£o.
    
    Returns:
        json: Status da aplica√ß√£o
    """
    return jsonify({
        'status': 'healthy',
        'model_loaded': model is not None,
        'message': 'Aplica√ß√£o funcionando corretamente'
    })

# Carregamento do modelo na inicializa√ß√£o
if __name__ == '__main__':
    print("üöÄ Iniciando aplica√ß√£o Flask para Predi√ß√£o de Dengue...")
    
    # Carregar o modelo
    load_model()
    
    if model is None:
        print("‚ö†Ô∏è  AVISO: Aplica√ß√£o iniciada sem modelo carregado!")
    
    # Executar a aplica√ß√£o
    app.run(
        debug=True,
        host='0.0.0.0',
        port=5000,
        threaded=True
    )
